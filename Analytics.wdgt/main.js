/*-------

Copyright (c) Anthony 2010

http://antscape.byethost8.com/


--------*/



/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */
 // I use this
 //https://www.google.com/analytics/reporting/visitors?id=1234&pdr=20091218-20100117&cmp=average&trows=5&gdfmt=nth_day&eid=DashboardRequest&rpt=VisitorsOverviewReport&tab=0&tchcol=0&tst=0&tscol=v0&tsdir=0&mdet=WORLD&midx=0&gidx=0&glcnt=1&gdfmt=nth_day
 
 
 //there is also an xml export api
 //like the above// GET /reporting/export?fmt=1&id=...
 
 
 
 //Google Protocol Documentation
 //http://code.google.com/apis/analytics/docs/gdata/2.0/gdataProtocol.html
 
 //This widget only uses the google data protocol to get the users analytics account id.
 //The widget only needs the password to get the account id, after that, no password is required, as long as:
 
 //YOU ARE ALREADY LOGGED INTO YOUR GOOGLE ACCOUNT 
 
 
 
 
 ///Things that need to be done
 // just do a search on this file for "TODO:"
 
 
 
 
 
var widgetversion=1.1;
 var isfront=true;
var readytologin=false;//this is false while the user is still typing the password in.
var nopassword=false;//whether or not the user chose to enter the password.
var mthere=false;//If the mouse is over the canvas. (the graph)
var daystoshow=30;
var bgcolor="white";
var nicestring="None";
var gstyle=1;
function applystyle()
{
    var accessanalyticslink=document.getElementById("text1");
    /*Styles list for variable "gstyle"
    
    
    =======
    
    1. Default (white)           Anthony google analytics-like skin
    2. Dark                      Anthony
    
    
    
    =======
    
    */
    if(gstyle==1)
    {
        accessanalyticslink.style.color="";
        document.getElementById("frontImg").src="light.png";
        document.getElementById("image").childNodes[0].src="Images/animated.gif";
        document.getElementById("image").style.top="29px";
    }
    else
    {
        accessanalyticslink.style.color="white";
        document.getElementById("frontImg").src="Parts/Images/front.png";
        document.getElementById("image").childNodes[0].src="black.gif";
        
        document.getElementById("image").style.top="160px";
        //parts/images is locked to dashcode
    }


}
function draw()
{
    
    var canvas=document.getElementById("canvas");
    var ctx=canvas.getContext("2d");
    
    var width=canvas.width;
    width=390;
    var height=canvas.height-5;
    var i;//index of current point
    var xp=0;//x position
    
    //make it an integer to prevent an ugly image
    var xinc=Math.ceil(width/(gr.pts.length-1));
    var xstart=width-(xinc*gr.pts.length-1)+xinc;
    ctx.clearRect(0,0,canvas.width,canvas.height);
    if(gstyle==1)
    {
        ctx.fillStyle=bgcolor;
        ctx.fillRect(0, 0, width, canvas.height); 
    }
    
    
    ctx.strokeStyle="#e7e7e7";
    ctx.font = "7pt sans-serif";
    ctx.lineWidth=1;
    
    if(gstyle==1)
    {
        ctx.fillStyle="black";
    }
    else
    {
    
        ctx.fillStyle="white";
    }
    
    
    var yablelindec=0;
    if(gstyle==1)
    {
    for(yablelindec=0;yablelindec<gr.ylabels.length;yablelindec++)
    {
        ctx.strokeStyle="#e7e7e7";
        ctx.beginPath();
        var ypos=(height-(gr.ylabels[yablelindec]*height/gr.max));
        ctx.moveTo(0,ypos);
        ctx.lineTo(width,ypos);
        ctx.stroke();
        
        
        if(ypos<10)//if it would be off the screen
        {
            ctx.fillText(gr.ylabels[yablelindec].toString(),2,ypos+12);
        }
        else
        {
            ctx.fillText(gr.ylabels[yablelindec].toString(),2,ypos);
        }
    
    
    }
    var ind=0;
    for(i=gr.pts.length-1;i>0;i-=7)
    {
        //draw vertical lines for each week
        ctx.strokeStyle="#e7e7e7";
        ctx.beginPath();
        var xpos=xstart+(xinc*i)
        ctx.moveTo(xpos,0);
        ctx.lineTo(xpos,height);
        ctx.stroke();
            
    
    }

    
    }
    if(gstyle==1)
    {
        ctx.fillStyle="rgba(230,242,250,0.6)";
    }
    else
    {
        ctx.fillStyle="rgba(255,255,255,0.2)";
    }
    xp=xstart;
    ctx.moveTo(xp,canvas.height);
    
    
    
    //the light blue part
    for(i=0;i<gr.pts.length;i++)
    {
        ctx.lineTo(xp,height-(gr.pts[i].Value[0]*height/gr.max));
        xp+=xinc;
    }
    ctx.lineTo(xp-xinc,canvas.height);
    ctx.closePath();
    ctx.fill();
    
    
    if(gr.pts.length>0)//only draw when it's ready
    {
    if(gstyle==1)
    {
        ctx.strokeStyle="#0077cc";
    }
    else
    {
        ctx.strokeStyle="white";
    }
    ctx.lineWidth=3;
    ctx.beginPath();
    xp=xstart;
    ctx.moveTo(xp,height-(gr.pts[0].Value[0]*height/gr.max));
    for(i=0;i<gr.pts.length;i++)
    {
        ctx.lineTo(xp,height-(gr.pts[i].Value[0]*height/gr.max));
        xp+=xinc;
    }
    ctx.stroke();
    xp=xstart;
    if(xinc>12 && gstyle==1)
    {
        for(i=0;i<gr.pts.length;i++)
        {
            ctx.drawImage(dot,xp-5,Math.round(height-(gr.pts[i].Value[0]*height/gr.max)-5),10,10);
            xp+=xinc;
        }
    }
    ctx.font = "12pt sans-serif";
    if(mthere)
    {
        var selindx=Math.round((mx-26-xstart)/(xinc));
        if(selindx>=0 && selindx<gr.pts.length)
        {
            //Draw stats for the dot the mouse is near.
            
            if(gstyle==1)
            {
                ctx.fillStyle="#0077cc";
                ctx.drawImage(dot,xstart+(xinc*selindx)-6,Math.round(height-(gr.pts[selindx].Value[0]*height/gr.max)-5),12,12);
            }
            else
            {
                ctx.fillStyle="white";
                ctx.drawImage(white,xstart+(xinc*selindx)-6,Math.round(height-(gr.pts[selindx].Value[0]*height/gr.max)-5),10,10);
            }
            ctx.fillText(gr.pts[selindx].Label[1],24,15);
            ctx.fillText(nicestring+": "+gr.pts[selindx].Value[1],24,32);
            
        }
    }
    else
    {
        if(gstyle==1)
        {
            ctx.fillStyle="#0077cc";
        }
        else
        {
            ctx.fillStyle="white";
        }
            
    ctx.font = "8pt sans-serif";
    //Summary value. eg. Visits: 302893832
    if(nicestring=="New Visits")
    {
        nicestring="Avg "+nicestring;
    }
    
    ctx.fillText(nicestring+": "+gr.summaryvalue,24,18);
    }
    }
    
   
}
var iframe;
function iframelogin()
{
    iframe=document.createElement("iframe");
    iframe.src="https://www.google.com/accounts/ServiceLoginBox?service=analytics&nui=1&hl=en-US&continue=http://www.google.com/analytics/home/%3Fet%3Dreset%26hl%3Den-US";
    iframe.src="javascript:void(alert())";
    iframe.src="javascript:void(function{document.forms[0].Passwd.value="+user.password+";document.forms[0].Email.value="+user.username+";document.forms[0].submit();}())";
    //iframe.document.forms[0].Passwd.value=user.password;
    //iframe.document.forms[0].Email.value=user.username;
    //iframe.document.forms[0].submit();
    alert("login : iframe")
}
function logintoanalytics()
{
    //TODO: MAKE THIS WORK
    
    //this function should log into the users WHOLE GOOGLE ACCOUNT
    //It's only logged into the google data api at the moment
    
    setstatus("Go to https://www.google.com/analytics/"," in SAFARI, and check 'Stay signed in', login, then wait 1 min.");
    
    //iframelogin();
    return true;
    //return false;
    setstatus("Logging in...","Logging into your google account on analytics");
    //It would be better if there was a way to login to www.google.com/analytics here, because ClientLogin does
    //not seem to work :(
    var loginpage=new XMLHttpRequest();
    loginpage.open("GET", "https://www.google.com/accounts/ServiceLoginBox?service=analytics&nui=1&hl=en-US&continue=http://www.google.com/analytics/home/%3Fet%3Dreset%26hl%3Den-US");
    loginpage.onload = function()
    {
        if(loginpage.status == 200)
        {
            alert(loginpage.getAllResponseHeaders());
            //alert(loginpage.responseText);
           var x =loginpage.getResponseHeader("Set-Cookie");
            
            var str = /<input type="hidden" name="GA3T" value="[^"]+">/.exec(loginpage.responseText)[0];
            
            GA3T=str.substring(str.indexOf("value=")+7, str.indexOf(">")-1);
            
            str = /<input type="hidden" name="GALX" value="[^"]+">/.exec(loginpage.responseText)[0];
            GALX=str.substring(str.indexOf("value=")+7, str.indexOf(">")-1);
            
            str = /<input type="hidden" name="dsh" value="[^"]+">/.exec(loginpage.responseText)[0];
            dsh=str.substring(str.indexOf("value=")+7, str.indexOf(">")-1);
            
            /GA3T=[^;]+;/.exec(x)[0]
            
            var cookie=/GoogleAccountsLocale_session=[^;]+;/.exec(x)[0]+" "+/GA3T=[^;]+;/.exec(x)[0]+" "+/GALX=[^;]+;/.exec(x)[0];
            
            alert("cookiesetter: "+cookie);
            
            loginpage.open("POST", "https://www.google.com/accounts/ServiceLoginBox");
            loginpage.setRequestHeader("Cache-Control", "no-cache");    
            loginpage.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            loginpage.setRequestHeader("Cookie", cookie);
            
            lpostdata="service="+encodeURIComponent(user.service)+"&nui=1&hl="+encodeURIComponent("en-US")+"&GA3T="+encodeURIComponent(GA3T)+"&PersistentCookie=yes&rmShown=1&dsh="+encodeURIComponent(dsh)+"&GALX="+encodeURIComponent(GALX)+"&Email="+encodeURIComponent(user.username)+"&Passwd="+encodeURIComponent(user.password)+"&continue="+encodeURIComponent("http://www.google.com/analytics/home/?et=reset&hl=en-US");
            alert(lpostdata);
            loginpage.onload = function()
            {
                alert("2: "+loginpage.getAllResponseHeaders());
                if(loginpage.status == 200)
                {
                }
                alert(loginpage.responseText);
                //loadgraph();
                
            }
            
            
            
            loginpage.send(lpostdata);
            
        }
        
    }
    loginpage.send(null);
    
    
    
    
}


var dot=new Image();
dot.src="dot.png";//blue dot
var big=new Image();
big.src="big.png";//big blue dot for mouseover
var white=new Image();
white.src="white.png";//white dot for mouseover

function setElementText(elementName, elementValue)
{
    var element = document.getElementById(elementName);
    if (element) {
        element.innerText = elementValue;
    }
}

var cstat="";

function setstatus(val,detail)//textboxes on back
{
    setElementText("status","Status: "+val);
    setElementText("detail",(detail!=null)?detail:"");
    cstat=val;
}
var updatetimer;//this is from setTimeout(update,<few hours>)
var currentsegment;
var currentaccount;
var startdate;
var enddate;
var responsegraph;
var gr={
"summaryvalue":0,
"pts":[],
"max":0,//the highest point
"ylabels":[],//the y-axis labels, usualy there are 2 for every point,
//eg for 51.23324234234%, there would be a string "50.23%", and a value 0.55123324234234
"ttype":"None"
};
//ttype=(visits|visitors|pageviews)
var ggrap;
var currentreport="VisitorsOverviewReport";// i don't think this does anyting, but send it anyway to be safe
var analytics={"flash":{"embed":function(a,b,c,d,e,f,g,h){
//this is a mess, but at least if works!
ggrap=eval("("+f.input+")").Graph;
gr.summaryvalue=ggrap.SummaryValue[1];
gr.pts=ggrap.Series[0].Points;
gr.max=0;
var indec=0;
gr.ylabels=[];
//Find the maximum y-label
for(indec=0;indec<gr.pts.length;indec++)
{
    var testa=parseFloat(gr.pts[indec].Value[0]);
    if(testa>gr.max)
    {
        gr.max=testa;
    }
}

if(gr.max==0)
{
    gr.max=1;
}
//leave a bit of space above the graph so it's not cramped
gr.max*=1.3;

for(indec=0;indec<(ggrap.Series[0].YLabels.length);indec++)
{
    
    
    /*if((Math.round(ggrap.Series[0].YLabels[indec][0]))>gr.max)
    {
    
    This didn't look that good
    
        gr.max=Math.round(ggrap.Series[0].YLabels[indec][0]);
    }*/
    gr.ylabels.push(parseFloat(ggrap.Series[0].YLabels[indec][0]));

}

    setstatus("Done",null);
    document.getElementById("image").style.display="none";//hide animated image loading gif
draw();

//this is to prevent errors. The string scr when eval()'d makes some calls to analytics.Properties. blah blah blah.
}},"Properties":{"_LOCALE":1},"PropertyManager":{"_getInstance":function(){return {"_get":function(a){return 1}};}}}


var data={
"segments":[],//this is not used
"accounts":[],//the users accounts
};
var user={
"username":"",
"password":"",
"googleAuth":"",//this is a "Authorization" http header
                //eg. xmlRequest.setRequestHeader("Authorization","GoogleLogin "+user.googleAuth);
"accountType":"google",//required.
"source":"antscape-analyticswidget-v1",//I don't know
"service":"analytics"
};
var loggedin=false;
var autoaccountselect=false;
function loginandupdate()
{
    
    setstatus("Logging In...","Authorizing Google Data API");
    var lxmlRequest = new XMLHttpRequest();
    lxmlRequest.open("POST", "https://www.google.com/accounts/ClientLogin");
    lxmlRequest.onload = function()
    {
        if(lxmlRequest.status == 200)
        {
            setstatus("Logged In.",null);
            loggedin=true;
            user.googleAuth=lxmlRequest.responseText.substring(lxmlRequest.responseText.indexOf("Auth")).replace("\n","");
            getSegments();
        }
        else if(lxmlRequest.status == 403)
        {
        document.getElementById("image").style.display="none";
            setstatus("Failed.","Wrong Username or Password (HTTP Forbidden)");
        }
        else
        {
        document.getElementById("image").style.display="none";
            setstatus("Failed.","HTTP "+lxmlRequest.status + " Error with unknown cause");
        }
    };
    
    lxmlRequest.setRequestHeader("Cache-Control", "no-cache");
    lxmlRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    var postdata="Email="+encodeURIComponent(user.username)+"&Passwd="+encodeURIComponent(user.password)+"&accountType="+encodeURIComponent(user.accountType)+"&source="+encodeURIComponent(user.source)+"&service="+encodeURIComponent(user.service);
    lxmlRequest.send(postdata);
}

var txt;
var scr;
var graphtype="visitors";
var dayorweek;
function loadgraph()
{
var gid=currentaccount.substring(3);

document.getElementById("image").style.display="block";
setElementText("ca","Account: "+currentaccount);
setstatus("Updating...","Getting Graph Data from Analytics");
//https://www.google.com/analytics/reporting/visitors?id=1234&pdr=20091218-20100117&cmp=average&trows=5&gdfmt=nth_day&eid=DashboardRequest&rpt=VisitorsOverviewReport&tab=0&tchcol=0&tst=0&tscol=v0&tsdir=0&mdet=WORLD&midx=0&gidx=0&glcnt=1&gdfmt=nth_day

var rgraphtype=graphtype;
var goalid=0;
if(/^goal_detail:-?\d+$/.test(rgraphtype))
{
    var findind=rgraphtype.indexOf(":");
    rgraphtype=rgraphtype.substring(0,findind);
    goalid=Math.round(graphtype.substring(findind+1));
    
}

dayorweek="nth_day";
if(daystoshow>80)
{
    dayorweek="nth_week";
}
if(daystoshow>365)
{
    dayorweek="nth_month";
}
var url="https://www.google.com/analytics/reporting/"+rgraphtype+"?id="+gid+"&pdr="+encodeURIComponent(startdate.getFullYear())+encodeURIComponent(az(startdate.getMonth()+1))+encodeURIComponent(az(startdate.getDate()))+"-"+encodeURIComponent(enddate.getFullYear())+encodeURIComponent(az(enddate.getMonth()+1))+encodeURIComponent(az(enddate.getDate()))+"&cmp=average&trows=5&gdfmt="+dayorweek+"&eid=DashboardRequest&rpt="+currentreport+"&tab=0&tchcol=0&tst=0&tscol=v0&tsdir=0&mdet=WORLD&midx=0&gidx=0&glcnt=1&gdfmt="+dayorweek;

if(goalid)
{
    url+="&goal="+goalid;
} var xmlRequest = new XMLHttpRequest();
    xmlRequest.open("GET", url);
    xmlRequest.onload = function()
    {
        if(xmlRequest.status == 200)
        {
            gr.ttype=graphtype;
            nicestring=gr.ttype;
            
    if(nicestring=="visits")
    {
        nicestring="Visits";
    }
    else if(nicestring=="visitors")
    {
        nicestring="Visitors";
    }
    else if(nicestring=="pageviews")
    {
        nicestring="Pageviews";
    }
    else if(nicestring=="average_pageviews")
    {
        nicestring="Average Pageviews";
    }
    else if(nicestring=="unique_visitors")
    {
        nicestring="Unique Visitors";
    }
    else if(nicestring=="time_on_site")
    {
        nicestring="Avg. Time on site";
    }
    else if(nicestring=="bounce_rate")
    {
        nicestring="Bounce Rate";
    }
    else if(nicestring=="visitor_types")
    {
        nicestring="New Visits";
    }
    else if(nicestring=="direct_sources")
    {
        nicestring="Direct Traffic";
    }
    else if(nicestring=="adsense_trending_revenue")
    {
        nicestring="Adsense Revenue";
    }
     else if(nicestring=="adsense_trending_page_impressions")
    {
        nicestring="Adsense Page Impressions";
    }
    else if(nicestring=="adsense_trending_unit_impressions")
    {
        nicestring="Adsense Unit Impressions";
    }
    else if(nicestring=="adsense_trending_clicks")
    {
        nicestring="Adsense Clicks";
    }
    else if(nicestring=="adsense_trending_ctr")
    {
        nicestring="Adsense CTR";
    }
    else if(nicestring=="adsense_trending_ecpm")
    {
        nicestring="Adsense eCPM";
    }
    else if(nicestring=="adsense_trending_ecpm")
    {
        nicestring="Adsense eCPM";
    }
    else if(nicestring=="goal_detail:1")
    {
        nicestring="Goal 1 Conversions";
    }
    else if(nicestring=="goal_detail:2")
    {
        nicestring="Goal 2 Conversions";
    }
    else if(nicestring=="goal_detail:3")
    {
        nicestring="Goal 3 Conversions";
    }
    else if(nicestring=="goal_detail:-1")
    {
        nicestring="Goal Conversions";
    }
    else if(nicestring=="events")
    {
        nicestring="Events";
    }
    
            document.getElementById("image").style.display="none";
            setstatus("Drawing Graph...","Parsing Graph Data from analytics");
            txt=xmlRequest.responseText;
            if(/<title>\nGoogle Analytics<\/title>/.test(txt))
            {
                if(nopassword)
                {
                    setstatus("Failed","You are not logged into analytics. Login to https://www.google.com/analytics/ in SAFARI, and check 'Stay signed in', login, then wait 1 min.");
                }
                else
                {
                    setstatus("Logging in...","Logging into Google Account.");
                    logintoanalytics();
                }
                
                
            }
            //scr = stuff inside <script></script>, an xmlDoc cannot parse this page
            scr=xmlRequest.responseText.substring(xmlRequest.responseText.indexOf("<script")+31,xmlRequest.responseText.indexOf("</script"));
            eval(scr);
            
        }
        else
        {
            document.getElementById("image").style.display="none";
            setstatus("Graph Failed...","Get segments: HTTP "+xmlRequest.status);
        }
    };
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");
    if((user.googleAuth!="")&&false)//this doesn't work for the normal analytics site
    {
        xmlRequest.setRequestHeader("Authorization","GoogleLogin "+user.googleAuth);
    }
    xmlRequest.setRequestHeader("GData-Version","2");
    
    xmlRequest.send(null);
    
    

    updatetimer=setTimeout(update,1000*60*60);//every hour
}
function az(integervalue){if(integervalue<10){return "0"+integervalue.toString();}return integervalue.toString();}
function getSegments()
{
    var xmlRequest = new XMLHttpRequest();
    xmlRequest.open("GET", "https://www.google.com/analytics/feeds/accounts/default");
    
    xmlRequest.onload = function()
    {
        if(xmlRequest.status == 200)
        {
            
            setstatus("Loading...","Parsing Analytics Account List");
            var acc=document.getElementById("accounts");
            acc.innerHTML="";
            var accounts=xmlRequest.responseXML.getElementsByTagName("entry");
            data.accounts=[];
            for(i=0;i<accounts.length;i++)
            {
                if(accounts[i].attributes[1].value=="analytics#account")
                {
                    data.accounts.push({"title":accounts[i].getElementsByTagName("title")[0].childNodes[0].nodeValue,"tableId":accounts[i].getElementsByTagName("tableId")[0].childNodes[0].nodeValue});
                     var currentacc=document.createElement("option");
                    currentacc.appendChild(document.createTextNode(accounts[i].getElementsByTagName("title")[0].childNodes[0].nodeValue));
                    currentacc.value=accounts[i].getElementsByTagName("tableId")[0].childNodes[0].nodeValue;
                    acc.appendChild(currentacc);
                }
            }
            if(data.accounts.length>0)
            {
                if(!autoaccountselect)
                {
                    currentaccount=data.accounts[0].tableId;
                }
                loadgraph();
            }
            else
            {
                document.getElementById("image").style.display="none";
                setstatus("Failed.","It appears there are no analytics accounts linked to your google account.");
            }
        }
        else
        {
        document.getElementById("image").style.display="none";
            setstatus("Failed...","Get segments: HTTP "+xmlRequest.status);
        }
    };
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");
    xmlRequest.setRequestHeader("Authorization","GoogleLogin "+user.googleAuth);
    xmlRequest.setRequestHeader("GData-Version","2");
    
    setstatus("Updating Account List","This will retrieve your tableIds for each account (eg. ga:1234)");
    xmlRequest.send(null);
}
function update()
{
    document.getElementById("image").style.display="none";
     var now=new Date();
    enddate=new Date(now.getFullYear(),now.getMonth(),now.getDate());
    startdate=new Date(now.getFullYear(),now.getMonth(),now.getDate());
    
    startdate.setDate(enddate.getDate()-daystoshow);
        
    setstatus("Updating...",null);
    if(!loggedin)
    {
        if(nopassword)
        {
            currentaccount=document.getElementById("nopass").value;
             document.getElementById("image").style.display="block";
            loadgraph();
        }
        else if((readytologin && (user.password!=""))||(document.getElementById("password").value==autologin))
        {
             document.getElementById("image").style.display="block";
            loginandupdate();
        }
        else
        {
            document.getElementById("image").style.display="none";
            setstatus("Please Login","You can also log into your google account in a browser, then enter your ga:id");
            setTimeout(function(){document.getElementById("username").focus();},500);
            showBack(null);
        }
    }
    else
    {
        
        if(data.accounts.length)
        {
            loadgraph();
        }
        else
        {
            getSegments();
        }
    }
}
//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
var autologin="nC&3b@$@%(";
function load()
{
    
    var pref=
    {
    "username":widget.preferenceForKey(dashcode.createInstancePreferenceKey("username")),
    "password":widget.preferenceForKey(dashcode.createInstancePreferenceKey("password")),
    "nopass":widget.preferenceForKey(dashcode.createInstancePreferenceKey("nopass")),
    "account":widget.preferenceForKey(dashcode.createInstancePreferenceKey("account")),
    "graphtype":widget.preferenceForKey(dashcode.createInstancePreferenceKey("graphtype")),
    "days":widget.preferenceForKey(dashcode.createInstancePreferenceKey("days")),
    "gstyle":widget.preferenceForKey(dashcode.createInstancePreferenceKey("gstyle"))
    };
    
    
    autoaccountselect=(pref.account!=null);
    if(pref.days==null){pref.days=30}
    if(pref.gstyle==null)
    {
        pref.gstyle=2;
    }
    
    if(pref.account==null)
    {
        pref.account="ga:1234";
    }
    
    if(pref.graphtype==null)
    {
        pref.graphtype="visits";
    }
    
    gstyle=pref.gstyle;
    applystyle();
    daystoshow=pref.days;
    document.getElementById("days").value=pref.days;
    dashcode.setupParts();
    applystyle();
    document.getElementById("image").style.display="none";
    user.username=pref.username;
    user.password=pref.password;
    document.getElementById("realcheckbox").checked=!(pref.nopass=="yes");
    document.getElementById("nopass").value=pref.account;
    currentaccount=pref.account;
    graphtype=pref.graphtype;
    
    
    
    
    document.getElementById("gtypedsel").value=graphtype;
    document.getElementById("password").value="";
    if(user.username==null)
    {
        user.username="";
        user.password="";
    }
    else
    {
        document.getElementById("password").value=autologin;
    }
    document.getElementById("username").value=user.username;
    document.getElementById("image").style.display="none";
    
    superpass();
     if(nopassword)
    {
        widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("username"));
        widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("password"));
    }
    pref=null;
    
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    if(updatetimer!=null)
    {
        clearTimeout(updatetimer);
    }
    // Remove any preferences as needed
    widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("username"));
    widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("password"));
    widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("account"));
    widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("nopass"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
    if(updatetimer!=null)
    {
        clearTimeout(updatetimer);
    }
}

//
// Function: show()
// Called when the widget has been shown
//
function superpass()
{
    
    var vis=document.getElementById("realcheckbox").checked==false;
    if(data.accounts.length>0)
    {
        document.getElementById("nopass").value=data.accounts[0].tableId;
    }
    document.getElementById("nopass").style.display=vis?"block":"none";
    document.getElementById("accounts").style.display=vis?"none":"block";
    
    document.getElementById("username").style.display=vis?"none":"block";
    document.getElementById("password").style.display=vis?"none":"block";
    document.getElementById("button").style.display=vis?"none":"block";
    document.getElementById("text2").style.display=vis?"block":"none";
    if(vis)
    {
        user.password="";
        document.getElementById("password").value="";
    }
    widget.setPreferenceForKey(vis?"yes":"no", dashcode.createInstancePreferenceKey("nopass"));
    nopassword=vis;
    if(nopassword)
    {
        widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("username"));
        widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("password"));
    }
    
}
function show()
{
    superpass();
    
    // Restart any timers that were stopped on hide
    update();
}
function checkchange()
{
    superpass();
}
//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    if(isfront)
    {
    isfront=false;
    var front = document.getElementById("front");
    var back = document.getElementById("back");
    
    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    draw();
    
    if(nopassword)
    {
        currentaccount=document.getElementById("nopass").value;
    }
    widget.setPreferenceForKey(currentaccount, dashcode.createInstancePreferenceKey("account"));
    if(!isfront)
    {
        if(isNaN(document.getElementById("days").value) || (document.getElementById("days").value<1))
        {
            document.getElementById("days").value="30";
        }
        daystoshow=document.getElementById("days").value;
        widget.setPreferenceForKey(daystoshow.toString(), dashcode.createInstancePreferenceKey("days"));
    
        update();
        var front = document.getElementById("front");
        var back = document.getElementById("back");

        if (window.widget) {
            widget.prepareForTransition("ToFront");
        }

        front.style.display="block";
        back.style.display="none";

        if (window.widget) {
            setTimeout('widget.performTransition();', 0);
        }
        if(nopassword)
        {
            widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("username"));
            widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("password"));
        }
    }
    isfront=true;
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function changeaccount(event)
{
    currentaccount=document.getElementById("accounts").value;
    widget.setPreferenceForKey(currentaccount, dashcode.createInstancePreferenceKey("account"));
    update();
}


function changegtype(event)
{
    graphtype=document.getElementById("gtypedsel").value;
    widget.setPreferenceForKey(graphtype, dashcode.createInstancePreferenceKey("graphtype"));
    update();
}


function loginbutton(event)
{
    
    if(document.getElementById("password").value==autologin)
    {
        setstatus("Login Button Ignored","It will automatically login to that account.");
    }
    else
    {
        loggedin=false;
        readytologin=true;
        user.username=document.getElementById("username").value;
        user.password=document.getElementById("password").value;
        widget.setPreferenceForKey(user.username, dashcode.createInstancePreferenceKey("username"));
        widget.setPreferenceForKey(user.password, dashcode.createInstancePreferenceKey("password"));
        if(nopassword)
        {
            widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("username"));
            widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("password"));
        }
    }
    update();
}


var mx=0;
function mousestop(event)
{
    mthere=false;
    draw();
}


function mouseinmove(event)
{
    mthere=true;
    if(event.clientX)
    {
        mx=event.clientX;
    }
    draw();
}


function accesss(event)
{
     if (window.widget) {
    if(currentaccount==null)
    {
       widget.openURL("https://www.google.com/analytics/");
    }
    else
    {
    
		widget.openURL("https://www.google.com/analytics/reporting/?reset=1&id="+encodeURIComponent(Math.round(currentaccount.substring(3))));
    }
	}
}


function updaterchekc(event)
{
    //Check for updates
    document.getElementById("updatecheck").childNodes[0].childNodes[1].childNodes[0].nodeValue="Checking"

    var updaterrequest = new XMLHttpRequest();
    
    //this text file will contain the text "1.2" or whatever version.
    
    //This is a text document hosted on my site. Nothing personal is sent there.
    updaterrequest.open("GET", "http://antscape.byethost8.com/analyticsversion.txt");
    updaterrequest.onload = function()
    {
        if(widgetversion<updaterrequest.responseText)
        {
            if(window.widget)
            {
                document.getElementById("updatecheck").childNodes[0].childNodes[1].childNodes[0].nodeValue="get update!";
                downloadnewversion();                                    
            }
        }
        else
        {
            document.getElementById("updatecheck").childNodes[0].childNodes[1].childNodes[0].nodeValue="no update";
        }
    };
    updaterrequest.setRequestHeader("Cache-Control", "no-cache");
    
    //make sure all headers are useless
    updaterrequest.setRequestHeader("Authorization","None");
    updaterrequest.setRequestHeader("Cookie","None");
    
    updaterrequest.send(null);
    setTimeout('document.getElementById("updatecheck").childNodes[0].childNodes[1].childNodes[0].nodeValue="ver. '+widgetversion+'"',120000);
}

function downloadnewversion()
{
    if(window.widget)
    {
        widget.openURL("http://antscape.byethost8.com/?p=analyticswidget");
    }
}


function changestylechooser(event)
{
    gstyle=parseInt(document.getElementById("stylechooser").value);
    widget.setPreferenceForKey(gstyle, dashcode.createInstancePreferenceKey("gstyle"));
    applystyle();
}


function maybethereisalinkhere(event)
{
    if(cstat=="Go to https://www.google.com/analytics/")
    {
        if(window.widget)
        {
            widget.openURL("https://www.google.com/analytics/");
        }
    }
}
